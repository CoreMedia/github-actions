# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# ******** NOTE ********
# The configuration of the trivy-action (and with that the configuration of THIS workflow) may not behave like expected,
# because the implementation of the trivy-action takes some unpredictable precedences when working with combinations of
# SARIF reports, Trivy config file and plain action input parameters. If you experience such unexpected behaviour with
# your configuration, you may find hints how to solve it having a look at the implementation of the trivy-action,
# especially https://github.com/aquasecurity/trivy-action/blob/0.11.0/entrypoint.sh#L175-L190.

# Required permissions that must be set in caller workflows (in private repositories):
# contents:         read      for actions/checkout to fetch code
# security-events:  write     for github/codeql-action/upload-sarif to upload SARIF results

name: Trivy Filesystem Scan

on:
  workflow_call:
    inputs:
      checkout_ref:
        description: The branch to checkout - see https://github.com/actions/checkout#usage (ref).
        type: string
        required: false
      fail_on_issues:
        description: Fail when vulnerabilities are found.
        type: boolean
        required: false
        default: false
      limit_severities_for_sarif:
        description: |
          Limit the severities of the reported issues for SARIF format to the configured severity - see
          https://github.com/aquasecurity/trivy-action#inputs (limit-severities-for-sarif). Normally the
          SARIF report contains the issues of all severities. This input can have an influence on the
          precedence of the action configuration, please see the NOTE above.
        type: string
        required: false
      scan_config:
        description: |
          The path to a 'trivy.yaml' config file - see https://github.com/aquasecurity/trivy-action#inputs
          (trivy-config) and https://aquasecurity.github.io/trivy/latest/docs/references/configuration/config-file.
          Using a config file over action inputs provides more configuration options and may lead to cleaner workflow
          code. A YAML contents of a basic config file may look like this:
              severity:
                - MEDIUM
                - HIGH
                - CRITICAL
              vulnerability:
                type:
                  - library
          Please also see the NOTE above to avoid problems due to unpredictable configuration precedences.
        type: string
        required: false
      scan_ignores:
        description: |
          Comma-separated list of relative paths in repository to one or more '.trivyignore' files - see 
          https://github.com/aquasecurity/trivy-action#inputs (trivyignores).
        type: string
        required: false
      scan_path:
        description: |
          The repository path to be scanned - see https://github.com/aquasecurity/trivy-action#inputs (scan-ref).
        type: string
        required: false
        default: .
      scan_output_file:
        description: |
          The output file for the scan results, - see https://github.com/aquasecurity/trivy-action#inputs (output).
          When an output file be is configured, it will be attached to the workflow run.
        type: string
        required: false
      scan_output_format:
        description: |
          The output format of the scan results. If the format is 'sarif' (default), the results are automatically
          uploaded to GitHub code scanning.
        type: string
        required: false
        default: sarif
      scan_output_template:
        description: |
          The output template for the scan results - see https://github.com/aquasecurity/trivy-action#inputs (template).
        type: string
        required: false
      scan_severity:
        description: |
          The severities of security issues to be reported - see https://github.com/aquasecurity/trivy-action#inputs
          (severity). Defaults to 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'.
        type: string
        required: false
      scan_vuln_type:
        description: |
          The vulnerability types to be reported - see https://github.com/aquasecurity/trivy-action#inputs (vuln-type).
        type: string
        required: false
    outputs:
      teams_fact_json:
        description: The 'fact' JSON snippet that can be added to an MS Teams Notification.
        value: |
          {
            "name": "Trivy Filesystem Scan:",
            "value": "${{ jobs.filesystem.outputs.result }}"
          }

jobs:
  filesystem:
    name: Filesystem Scan
    runs-on: ubuntu-latest
    outputs:
      result: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.3
        with:
          ref: ${{ inputs.checkout_ref }}

      - name: Initialize internal configuration
        id: config
        run: |
          if [[ -n '${{ inputs.checkout_ref }}' ]]; then
            echo "checkout_sha=$(git show-ref ${{ inputs.checkout_ref }} | grep -v '/remotes/' | sed 's/ .*//')" >> "$GITHUB_OUTPUT"
            echo "checkout_ref=$(git show-ref ${{ inputs.checkout_ref }} | grep -v '/remotes/' | sed 's/.* //')" >> "$GITHUB_OUTPUT"
            echo "upload_artifact_name_prefix=${{ inputs.checkout_ref }}_" >> "$GITHUB_OUTPUT"
          else
            echo "upload_artifact_name_prefix=" >> "$GITHUB_OUTPUT"
          fi
          if [[ -n '${{ inputs.scan_output_file }}' ]]; then
            echo 'output_file=${{ inputs.scan_output_file }}' >> "$GITHUB_OUTPUT"
          elif [[ '${{ inputs.scan_output_format }}' == 'sarif' ]]; then
            echo 'output_file=trivy-image-results.sarif' >> "$GITHUB_OUTPUT"
          elif [[ '${{ inputs.scan_output_format }}' != 'table' ]]; then
            echo "::error title=Configuration Error::'scan_output_format=${{ inputs.scan_output_format }}' requires 'scan_output_file'."
            exit 1
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.11.2
        with:
          scan-type: fs
          scan-ref: ${{ inputs.scan_path }}
          trivy-config: ${{ inputs.scan_config }}
          format: ${{ inputs.scan_output_format }}
          output: ${{ steps.config.outputs.output_file }}
          template: ${{ inputs.scan_output_template }}
          vuln-type: ${{ inputs.scan_vuln_type }}
          severity: ${{ inputs.scan_severity }}
          limit-severities-for-sarif: ${{ inputs.limit_severities_for_sarif }}
          trivyignores: ${{ inputs.scan_ignores }}
          exit-code: ${{ inputs.fail_on_issues && '1' || '0' }}

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() && inputs.scan_output_format == 'sarif'
        uses: github/codeql-action/upload-sarif@v2.3.6
        with:
          sarif_file: ${{ steps.config.outputs.output_file }}
          ref: ${{ steps.config.outputs.checkout_ref }}
          sha: ${{ steps.config.outputs.checkout_sha }}

      - name: Upload Trivy scan results to GitHub workflow run
        if: always() && inputs.scan_output_file
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ steps.config.outputs.upload_artifact_name_prefix }}${{ steps.config.outputs.output_file }}
          path: ${{ steps.config.outputs.output_file }}
