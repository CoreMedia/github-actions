# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow can execute a Maven build that creates the Docker image that should be tested. But it assumes that all
# required artifacts that are needed for the build are already cached and no downloads from a custom Maven repository
# manager are required anymore.

# Required permissions that must be set in caller workflows (in private repositories):
# contents:         read      for actions/checkout to fetch code
# security-events:  write     for github/codeql-action/upload-sarif to upload SARIF results

name: Trivy Image Scan

on:
  workflow_call:
    inputs:
      build_image_command:
        description: The command to build to Docker image the be scanned.
        type: string
        required: false
        default: ''
      fail_on_issues:
        description: Fail when vulnerabilities are found.
        type: boolean
        required: false
        default: false
      java_version:
        description: |
          The Java version to be used - see https://github.com/actions/setup-java#usage (java-version). It's only used
          when the 'image_build_command' starts with 'mvn'.
        type: string
        required: false
        default: 11
      java_distribution:
        description: |
          The Java distribution to be used - https://github.com/actions/setup-java#usage (distribution). It's only used
          when the 'image_build_command' starts with 'mvn'.
        type: string
        required: false
        default: corretto
      scan_ignores:
        description: |
          Comma-separated list of relative paths in repository to one or more '.trivyignore' files - see 
          https://github.com/aquasecurity/trivy-action#inputs (trivyignores).
        type: string
        required: false
      scan_image_ref:
        description: |
          The reference of the Docker image the be scanned (whether built by this workflow or not) - see
          https://github.com/aquasecurity/trivy-action#inputs (image-ref).
        type: string
        required: true
      scan_output_file:
        description: |
          The output file for the scan results, - see https://github.com/aquasecurity/trivy-action#inputs (output).
          When an output file be is configured, it will be attached to the workflow run.
        type: string
        required: false
      scan_output_format:
        description: |
          The output format of the scan results. If the format is 'sarif' (default), the results are automatically
          uploaded to GitHub code scanning.
        type: string
        required: false
        default: sarif
      scan_output_template:
        description: |
          The output template for the scan results - see https://github.com/aquasecurity/trivy-action#inputs (template).
        type: string
        required: false
      scan_severity:
        description: |
          The severities of security issues to be reported - see https://github.com/aquasecurity/trivy-action#inputs
          (severity).
        type: string
        required: false
        default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      scan_vuln_type:
        description: |
          The vulnerability types to be reported - see https://github.com/aquasecurity/trivy-action#inputs (vuln-type).
        type: string
        required: false
    outputs:
      teams_fact_json:
        description: The 'fact' JSON snippet that can be added to an MS Teams Notification.
        value: |
          {
            "name": "Trivy Image Scan:",
            "value": "${{ jobs.image.outputs.result }}"
          }

jobs:
  image:
    name: Image Scan
    runs-on: ubuntu-latest
    outputs:
      result: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.5.0

      - name: Initialize internal configuration
        id: config
        run: |
          if [[ -n '${{ inputs.scan_output_file }}' ]]; then
            echo 'output_file=${{ inputs.scan_output_file }}' >> "$GITHUB_OUTPUT"
          elif [[ '${{ inputs.scan_output_format }}' == 'sarif' ]]; then
            echo 'output_file=trivy-image-results.sarif' >> "$GITHUB_OUTPUT"
          elif [[ '${{ inputs.scan_output_format }}' != 'table' ]]; then
            echo "::error title=Configuration Error::'scan_output_format=${{ inputs.scan_output_format }}' requires 'scan_output_file'."
            exit 1
          fi

      - name: Set up JDK 11
        if: startsWith(inputs.build_image_command, 'mvn')
        uses: actions/setup-java@v3.11.0
        with:
          java-version: ${{ inputs.java_version }}
          distribution: ${{ inputs.java_distribution }}

      - name: Cache Maven Repo
        if: startsWith(inputs.build_image_command, 'mvn')
        uses: actions/cache@v3.3.1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Docker image with Maven
        if: startsWith(inputs.build_image_command, 'mvn')
        run: ${{ inputs.build_image_command }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.9.2
        with:
          scan-type: image
          image-ref: ${{ inputs.scan_image_ref }}
          format: ${{ inputs.scan_output_format }}
          output: ${{ steps.config.outputs.output_file }}
          template: ${{ inputs.scan_output_template }}
          vuln-type: ${{ inputs.scan_vuln_type }}
          severity: ${{ inputs.scan_severity }}
          trivyignores: ${{ inputs.scan_ignores }}
          exit-code: ${{ inputs.fail_on_issues && '1' || '0' }}

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() && inputs.scan_output_format == 'sarif'
        uses: github/codeql-action/upload-sarif@v2.2.11
        with:
          sarif_file: ${{ steps.config.outputs.output_file }}

      - name: Upload Trivy scan results to GitHub workflow run
        if: always() && inputs.scan_output_file
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ steps.config.outputs.output_file }}
          path: ${{ steps.config.outputs.output_file }}
